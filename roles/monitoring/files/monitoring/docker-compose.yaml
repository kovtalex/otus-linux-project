version: "3.8"

services:
  prometheus:
    image: ${PROMETHEUS_IMAGE}
    container_name: prometheus
    restart: always
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention=10d'
    volumes:
      - ./prometheus:/prometheus
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ./alerts.yml:/etc/prometheus/alerts.yml
      - /etc/localtime:/etc/localtime:ro
    ports:
      - 9090:9090
    networks:
      monitoring:

  alertmanager:
    image: ${ALERT_MANAGER_IMAGE}
    container_name: alertmanager
    restart: always
    command:
      - '--config.file=/etc/alertmanager/config.yml'
    volumes:
      - ./config.yml:/etc/alertmanager/config.yml
    ports:
      - 9093:9093
    networks:
      monitoring:

  grafana:
    image: grafana
    build:
      context: ./docker/grafana
      args:
        - GRAFANA_IMAGE
    container_name: grafana
    restart: always
    environment:
      - TZ=Europe/Moscow
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD:-admin}
      - GF_RENDERING_SERVER_URL=http://renderer:8081/render
      - GF_RENDERING_CALLBACK_URL=http://grafana:3000/
      - GF_LOG_FILTERS=rendering:debug
    depends_on:
      - prometheus
      - renderer
    volumes:
      - ./grafana:/var/lib/grafana
      - ./grafana.ini:/etc/grafana/grafana.ini
    ports:
      - 3000:3000
    networks:
      monitoring:

  renderer:
    image: ${GRAFANA_IMAGE_RENDERER_IMAGE}
    container_name: renderer
    restart: always
    environment:
      ENABLE_METRICS: 'true'
    volumes:
      - /etc/localtime:/etc/localtime:ro
    networks:
      monitoring:

networks:
  monitoring:
