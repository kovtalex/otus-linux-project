user  nginx;
worker_processes  auto;

#error_log  /var/log/nginx/error.log notice;
error_log  /dev/stderr notice;
pid        /var/run/nginx.pid;


# Brotli
load_module modules/ngx_http_brotli_filter_module.so;
load_module modules/ngx_http_brotli_static_module.so;

events {
    worker_connections  1024;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # ---------------------------------------------------------------------
    # REVERSE PROXY CONFIGURATION for Wordpress, v1.0/2018
    # https://www.ryadel.com
    # ---------------------------------------------------------------------
     
    #Enables or disables buffering of responses from the proxied server.
    proxy_buffering on;
     
    #prevent header too large errors
    proxy_buffers 256 16k;
    proxy_buffer_size 32k;
     
    #set the location of the cached files, zone, name, size (1000 MB) and how long to cache for (600 minutes)
    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=edge-cache:10m inactive=600m max_size=1g;   
    proxy_temp_path /var/cache/nginx/tmp;
    proxy_cache_key $scheme$host$request_uri;
     
    # When enabled, only one request at a time will be allowed to populate 
    # a new cache element identified according to the proxy_cache_key directive 
    # by passing a request to a proxied server. 
    # Other requests of the same cache element will either wait for a response to appear in the cache 
    # or the cache lock for this element to be released, up to the time set by the proxy_cache_lock_timeout directive.
    proxy_cache_lock on;
     
    # proxy_cache_revalidate instructs NGINX to use conditional GET requests when refreshing content from the origin servers.
    # If a client requests an item that is cached but expired as defined by the cache control headers, NGINX includes the 
    # If-Modified-Since field in the header of the GET request it sends to the origin server. 
    # This saves on bandwidth, because the server sends the full item only if it has been modified since the time recorded 
    # in the Last-Modified header attached to the file when NGINX originally cached it.
    proxy_cache_revalidate on;
     
    #proxy_cache_min_uses sets the number of times an item must be requested by clients before NGINX caches it. 
    # This is useful if the cache is constantly filling up, as it ensures that only the most frequently accessed items 
    # are added to the cache. By default proxy_cache_min_uses is set to 1.
    proxy_cache_min_uses 3;
     
    #The updating parameter to the proxy_cache_use_stale directive, combined with enabling the 
    # proxy_cache_background_update directive, instructs NGINX to deliver stale content when clients request an item 
    # that is expired or is in the process of being updated from the origin server. All updates will be done in the background. 
    # The stale file is returned for all requests until the updated file is fully downloaded.
    proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
    proxy_cache_background_update on;
     
    #fix 504 gateway timeouts, can go in nginx.conf
    proxy_connect_timeout 600;
    proxy_send_timeout 600;
    proxy_read_timeout 600;
    send_timeout 600;
     
    # Sets caching time for different response codes
    proxy_cache_valid 200 302 10m;
    proxy_cache_valid 301      	1h;
    proxy_cache_valid any      	1m;
     
    # Sets the HTTP protocol version for proxying (default is 1.0).
    # Version 1.1 is recommended for use with keepalive connections and NTLM authentication.
    proxy_http_version 1.1;
     
    # Determines whether SSL sessions can be reused when working with the proxied server (default is on).
    # If the errors “SSL3_GET_FINISHED:digest check failed” appear in the logs, try turning it off.
    # proxy_ssl_session_reuse on;
     
    # ---------------------------------------------------------------------
    # REVERSE PROXY CONFIGURATION - END
    # ---------------------------------------------------------------------



    # log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                   '$status $body_bytes_sent "$http_referer" '
    #                   '"$http_user_agent" "$http_x_forwarded_for"';

    # access_log  /var/log/nginx/access.log  main;

    # json logs
    map $upstream_response_time $temprt {
      default $upstream_response_time;
      ""      0;
    }
    
    log_format json escape=json '{ "@timestamp": "$time_iso8601", '
                   '"remote_addr": "$remote_addr", '
                   '"body_bytes_sent": "$body_bytes_sent", '
                   '"status": $status, '
                   '"request": "$request", '
                   '"url": "$uri", '
                   '"request_method": "$request_method", '
                   '"response_time": $temprt, '
                   '"http_referrer": "$http_referer", '
                   '"http_user_agent": "$http_user_agent" }';

    access_log off;
    #

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    # включаем сжатие
    gzip on;
    # отключаем сжатие для старья
    gzip_disable "msie6";
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    # не сжимать файлы меньше 256б байт
    gzip_min_length 256;
    # определяет MIME типы, для которых будет работать сжатие    
    gzip_types application/atom+xml application/geo+json application/javascript application/x-javascript application/json application/ld+json application/manifest+json application/rdf+xml application/rss+xml application/xhtml+xml application/xml font/eot font/otf font/ttf image/svg+xml text/css text/javascript text/plain text/xml;

    # For Grafana
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }
    
    include /etc/nginx/conf.d/*.conf;
}
